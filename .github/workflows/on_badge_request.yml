name: Handle Language Badge Request

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  handle-badge-request:
    if: contains(github.event.issue.labels.*.name, 'badge-request')
    runs-on: ubuntu-latest
    env:
      logging: ${{ vars.LOGGING_ENABLED }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests
        run: python -m pip install requests

      - name: Parse issue 
        id: parse_issue
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          LABELS: ${{ toJson(github.event.issue.labels) }}
        run: |
          chmod +x .github/scripts/parse.sh
          .github/scripts/parse.sh

      - name: Run language badge script
        id: run_badge_script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER_REPO: ${{ steps.parse_issue.outputs.OWNER_REPO }}
          BADGE_COLOR: ${{ steps.parse_issue.outputs.BADGE_COLOR }}
          BADGE_LABEL: ${{ steps.parse_issue.outputs.BADGE_LABEL }}
        run: |
          python .github/scripts/fetch.py

      - name: Commit and push badge
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER_REPO: ${{ steps.parse_issue.outputs.OWNER_REPO }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git add badges/
          git commit -m "Add language badge for $OWNER_REPO" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}

      - name: Comment on the issue with badge info
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
          FILE_NAME: ${{ steps.parse_issue.outputs.FILE_NAME }}
        run: |
          BADGE_URL="https://raw.githubusercontent.com/${REPO}/refs/heads/main/badges/${FILE_NAME}"
          COMMENT_BODY="Badge generated: ${BADGE_URL}"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments \
            -d "{\"body\": \"$COMMENT_BODY\"}"

      - name: Close the issue
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER \
            -d '{"state":"closed"}'

      - name: Handle failure - comment and label the issue
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          COMMENT_BODY="An error occurred while processing your badge request."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/comments \
            -d "{\"body\": \"$COMMENT_BODY\"}"

          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER/labels \
            -d '{"labels": ["failed"]}'
      
      - name: Log run
        if: env.logging == 'true'
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          OWNER_REPO: ${{ steps.parse_issue.outputs.OWNER_REPO }}
          BADGE_COLOR: ${{ steps.parse_issue.outputs.BADGE_COLOR }}
          BADGE_LABEL: ${{ steps.parse_issue.outputs.BADGE_LABEL }}
          FILE_NAME: ${{ steps.parse_issue.outputs.FILE_NAME }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x .github/scripts/log.sh
          if [[ "${{ job.status }}" == "success" ]]; then
            .github/scripts/log.sh success
          else
            .github/scripts/log.sh failed
          fi